<#
Written by:  Ofir Gavish
Date:        2024-16-10

.SYNOPSIS
This script checks Azure AD applications for expiring secrets and certificates. 
It sends email notifications for secrets and certificates that are expiring within 
30, 10, or 5 days.

.DESCRIPTION
The script retrieves all Azure AD applications and their associated secrets and 
certificates. It calculates the remaining days until expiration and sends an 
email notification if any secrets or certificates are set to expire within 
the specified thresholds. The script can be scheduled to run automatically.

.PARAMETER DaysUntilExpiration
Defines the threshold for filtering applications by expiration days.

.PARAMETER IncludeAlreadyExpired
Specifies whether to include applications with already expired secrets and certificates.

.EXAMPLE
Run the script to receive notifications for any expiring secrets or certificates.

#>
Connect-MgGraph -ManagedIdentity


$Messages = @{
    DurationNotice = @{
        Info = @(
            'The operation is running and will take longer the more applications the tenant has...'
            'Please wait...'
        ) -join ' '
    }
}

# Configuration
$DaysUntilExpiration = 30  # Change this as needed
$IncludeAlreadyExpired = 'No'  # Set to 'Yes' if you want to include already expired secrets
$EmailParams = @{
    SmtpServer = 'smtp.yourserver.com'
    From       = 'you@example.com'
    To         = 'recipient@example.com'
    Subject    = 'Secret Expiration Warning'
    Body       = ''
}

Write-Host $Messages.DurationNotice.Info -ForegroundColor yellow

$Now = Get-Date
$Applications = Get-MgApplication -all

foreach ($App in $Applications) {
    $AppName = $App.DisplayName
    $AppID   = $App.Id
    $ApplID  = $App.AppId

    $AppCreds = Get-MgApplication -ApplicationId $AppID |
        Select-Object PasswordCredentials, KeyCredentials

    $Secrets = $AppCreds.PasswordCredentials
    $Certs   = $AppCreds.KeyCredentials

    foreach ($Secret in $Secrets) {
        $StartDate  = $Secret.StartDateTime
        $EndDate    = $Secret.EndDateTime
        $SecretName = $Secret.DisplayName

        $Owner    = Get-MgApplicationOwner -ApplicationId $App.Id
        $Username = $Owner.AdditionalProperties.userPrincipalName -join ';'
        $OwnerID  = $Owner.Id -join ';'

        if ($null -eq $Owner.AdditionalProperties.userPrincipalName) {
            $Username = @(
                $Owner.AdditionalProperties.displayName
                '**<This is an Application>**'
            ) -join ' '
        }
        if ($null -eq $Owner.AdditionalProperties.displayName) {
            $Username = '<<No Owner>>'
        }

        $RemainingDaysCount = ($EndDate - $Now).Days

        if ($IncludeAlreadyExpired -eq 'No') {
            if ($RemainingDaysCount -le $DaysUntilExpiration -and $RemainingDaysCount -ge 0) {
                # Do nothing; just filter for logging
            }
        } elseif ($IncludeAlreadyExpired -eq 'Yes') {
            if ($RemainingDaysCount -le $DaysUntilExpiration) {
                # Do nothing; just filter for logging
            }
        }

        # Check for email notification conditions
        if ($RemainingDaysCount -eq 30 -or $RemainingDaysCount -eq 10 -or $RemainingDaysCount -eq 5) {
            $EmailParams.Body += "Warning: The secret '$SecretName' for application '$AppName' will expire in $RemainingDaysCount days.`n"
        }
    }

    foreach ($Cert in $Certs) {
        $StartDate = $Cert.StartDateTime
        $EndDate   = $Cert.EndDateTime
        $CertName  = $Cert.DisplayName

        $Owner    = Get-MgApplicationOwner -ApplicationId $App.Id
        $Username = $Owner.AdditionalProperties.userPrincipalName -join ';'
        $OwnerID  = $Owner.Id -join ';'

        if ($null -eq $Owner.AdditionalProperties.userPrincipalName) {
            $Username = @(
                $Owner.AdditionalProperties.displayName
                '**<This is an Application>**'
            ) -join ' '
        }
        if ($null -eq $Owner.AdditionalProperties.displayName) {
            $Username = '<<No Owner>>'
        }

        $RemainingDaysCount = ($EndDate - $Now).Days

        if ($IncludeAlreadyExpired -eq 'No') {
            if ($RemainingDaysCount -le $DaysUntilExpiration -and $RemainingDaysCount -ge 0) {
                # Do nothing; just filter for logging
            }
        } elseif ($IncludeAlreadyExpired -eq 'Yes') {
            if ($RemainingDaysCount -le $DaysUntilExpiration) {
                # Do nothing; just filter for logging
            }
        }

        # Check for email notification conditions
        if ($RemainingDaysCount -eq 30 -or $RemainingDaysCount -eq 10 -or $RemainingDaysCount -eq 5) {
            $EmailParams.Body += "Warning: The certificate '$CertName' for application '$AppName' will expire in $RemainingDaysCount days.`n"
        }
    }
}

# Send email if there are any warnings
if ($EmailParams.Body) {
    Send-MailMessage @EmailParams
}
